"use strict";

// Конкатенация
console.log('arr' + ' - object');

// Унарный плюс: сложение с помощью оператора + перед строкой
console.log(4 + +'5');

// Инкремент и декремент
let incr = 10,
    decr = 10;

incr++; // опреатор инкремента, увеличение значения на единицу
decr--; // опреатор декремента, уменьшение значения на единицу

console.log(incr);
console.log(decr);

let deduction = 10,
    addition = 10;

// если в постфиксной форме сразу изменить и посмотреть значение, сначало вернётся старое значение, и только потом будет результат сложения или вычетания
console.log(deduction++);
console.log(addition--);

// постфиксная форма записи, когда операторы стоят после значения
deduction++;
addition--;

// префиксная форма записи, когда операторы стоят до значения
++deduction;
--addition;

// Остаток от деления двух чисел, 5 делиться на 2 столько, сколько это возможно, результат остаток от деления
console.log(5 % 2);

// Присваивоние (=)
let assign = 10;

// Проверка равенства (==) по значению
console.log(2 * 4 == 8); // true
console.log(2 * 4 == '8'); // true

// Строгая проверка равенства (===) по типу данных
console.log(2 * 4 === 8); // true
console.log(2 * 4 === '8'); // false

// Логические операторы
// оператор (И) работает тогда, когда 2 или более значений являются истиными
let isChecked = true,
      isClose = true;
console.log(isChecked && isClose); // true

isChecked = true;
isClose = false;

console.log(isChecked && isClose); // false

// оператор (ИЛИ) работает тогда, когда 1 значение является истиным
console.log(isChecked || isClose); // true

// оператор отрицания (!) правду обращает в ложь и наоборот
console.log(!isChecked || isClose); // false

// порядок выполнения операторов
console.log((2 + 2) * 2 === 8); // скобки указывают приоритетность вычисления
