"use strict";

// Числа, могут быть целыми или дробными
let number = 4;

console.log(4 / 0); // Infinity числовой тип данных, относится к примитивам

console.log('string' * 9); // NaN не число

// Строки
const person = 'Ivan'; // Строки могут иметь большое количество слов, и содержать цифры
const personName = `Alex`; // Обратные кавычки (бэктики)

// Логический тип данных (булевое значение)
const yes = true;
const no = false;

// null/undefined
console.log(something); // null в чистом виде очень редкое явление, null говорит, то что мы хотим получить, не существует

let und; // undefined существует но никого значения не имеет
console.log(und);

// Объект
// в свойствах могут содержаться любые типы данных
// формат записи свойств "ключ: значение"
const obj = {
  name: 'John',
  age: 25,
  isMarried: false
};

// чтобы получить доступ к свойствам объекта нужно использовать .(точку) или [](квадратные скобки), рекомендовано через точку
console.log(obj.name);
console.log(obj['age']);

const object = { a: 1, b: 2 }; // храенение данных ключ/значение, порядок не имеет значения

// свойство Anna записаное без кавычек, также является строкой, как 'Alice'
const salary = {
  Anna: 500,
  'Alice': 800
};

// Массив
// может хранить любые типы данных
let arr = ['plum.png', 'orange.jpg', 'apple.bmp', 7, {}, []];

// чтобы обратиться к каждому элементу массива по порядку, нужно указать номер(индекс) элемента(значения), номерация начинается с 0
console.log(arr[1]);

// является частным случаем объекта, используется для хранения данных идущих строго по порядку
// массив в качестве ключа(свойства) использует номер(индекс) элемента(значения) по порядку
const array = ['a', 'b', 'c']; // хранение элементов по порядку
const arrObj = { // пример
  0: 'a',
  1: 'b',
  2: 'c'
};

console.log(arr[1]);


